import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import crypto from "crypto";
import jwt from "jsonwebtoken";
import validator from "validator";

// ------------------- Address SubSchema -------------------
const addressSchema = new mongoose.Schema(
Â  {
Â  Â  street: { type: String, required: true, trim: true },
Â  Â  city: { type: String, required: true, trim: true },
Â  Â  state: { type: String, required: true, trim: true },
Â  Â  postalCode: { type: String, required: true, trim: true },
Â  Â  country: { type: String, required: true, trim: true },
Â  Â  isDefault: { type: Boolean, default: false },
Â  },
Â  { timestamps: true }
);

// ------------------- Main User Schema -------------------
const userSchema = new mongoose.Schema(
Â  {
Â  Â  name: { type: String, required: true, trim: true },

Â  Â  email: {
Â  Â  Â  type: String,
Â  Â  Â  required: true,
Â  Â  Â  unique: true,
Â  Â  Â  index: true,
Â  Â  Â  trim: true,
Â  Â  Â  lowercase: true,
Â  Â  Â  validate: [validator.isEmail, "Please provide a valid email"],
Â  Â  },

Â  Â  password: {
Â  Â  Â  type: String,
Â  Â  Â  required: true,
Â  Â  Â  minlength: 8,
Â  Â  Â  select: false,
Â  Â  },

Â  Â  role: {
Â  Â  Â  // Updated to Admin, Agent, User
Â  Â  Â  type: String,
Â  Â  Â  enum: ["Admin", "Agent", "User"],
Â  Â  Â  default: "User",
Â  Â  },

Â  Â  accountVerified: { type: Boolean, default: false },

Â  Â  // ------------------- Agent / Property Integration -------------------
Â  Â  // Properties listed by this Agent (if role is Agent)
Â  Â  listedProperties: [
Â  Â  Â  { type: mongoose.Schema.Types.ObjectId, ref: "Property" },
Â  Â  ],
    
Â  Â  // ------------------- OTP / Verification -------------------
Â  Â  verificationCode: { type: String, select: false },
Â  Â  verificationCodeExpiry: { type: Date },
Â  Â  otpAttempts: { type: Number, default: 0 },
Â  Â  resendAttempts: { type: Number, default: 0 },
Â  Â  lastOtpSentAt: { type: Date },

Â  Â  // ------------------- Password Reset -------------------
Â  Â  resetPasswordToken: { type: String, select: false },
Â  Â  resetPasswordExpire: { type: Date },

Â  Â  // ------------------- Profile Data -------------------
Â  Â  avatar: {
Â  Â  Â  url: { type: String },
Â  Â  Â  publicId: { type: String },
Â  Â  },

Â  Â  recentlyViewed: [{ type: mongoose.Schema.Types.ObjectId, ref: "Property" }], // Changed from Product to Property
Â  Â  // orders: [{ type: mongoose.Schema.Types.ObjectId, ref: "Order" }], // Assuming 'Orders' might not fit a property app

Â  Â  // ------------------- Security / Throttling -------------------
Â  Â  loginAttempts: { type: Number, required: true, default: 0 },
Â  Â  lockUntil: { type: Date },
Â  Â  refreshToken: { type: String, select: false }, // Hashed refresh token storage

Â  Â  // ------------------- Analytics -------------------
Â  Â  lastLogin: { type: Date },
Â  Â  loginHistory: [
Â  Â  Â  {
Â  Â  Â  Â  ip: String,
Â  Â  Â  Â  userAgent: String,
Â  Â  Â  Â  time: { type: Date, default: Date.now }, // Use Date type for better sorting/querying
Â  Â  Â  },
Â  Â  ],

Â  Â  // ------------------- Embedded Data -------------------
Â  Â  addresses: [addressSchema],
Â  },
Â  {
Â  Â  timestamps: true,
Â  Â  toJSON: {
Â  Â  Â  virtuals: true,
Â  Â  Â  transform: (_, obj) => {
Â  Â  Â  Â  // Clean up sensitive fields before sending JSON response
Â  Â  Â  Â  delete obj.password;
Â  Â  Â  Â  delete obj.resetPasswordToken;
Â  Â  Â  Â  delete obj.resetPasswordExpire;
Â  Â  Â  Â  delete obj.verificationCode;
Â  Â  Â  Â  delete obj.verificationCodeExpiry;
Â  Â  Â  Â  delete obj.refreshToken;
Â  Â  Â  Â  delete obj.loginAttempts;
Â  Â  Â  Â  delete obj.lockUntil;
Â  Â  Â  Â  return obj;
Â  Â  Â  },
Â  Â  },
Â  }
);

// ------------------- Pre-save Middleware: Password Hashing -------------------
userSchema.pre("save", async function (next) {
Â  if (!this.isModified("password")) return next();
Â  const salt = await bcrypt.genSalt(10);
Â  this.password = await bcrypt.hash(this.password, salt);
Â  next();
});

// ------------------- Methods: Authentication & Tokens -------------------
userSchema.methods.comparePassword = async function (candidatePassword) {
Â  // Explicitly check for password existence before comparing
Â  if (!this.password) {
        // We must select the password field for this method to work outside of creation
        console.error("Password field not selected for comparison."); 
        return false;
    }
Â  return bcrypt.compare(candidatePassword, this.password);
};

userSchema.methods.getJwtToken = function () {
Â  return jwt.sign({ id: this._id, role: this.role }, process.env.JWT_SECRET, {
Â  Â  expiresIn: process.env.JWT_EXPIRE || "15m",
Â  });
};

// ðŸ”’ Secure Refresh Token Handling
userSchema.methods.setRefreshToken = function () {
Â  // Create the raw, unhashed refresh token
Â  const refreshToken = jwt.sign({ id: this._id }, process.env.JWT_REFRESH_SECRET, {
Â  Â  expiresIn: process.env.JWT_REFRESH_EXPIRE || "7d",
Â  });

Â  // Store the HASHED version in the database
Â  this.refreshToken = crypto.createHash("sha256").update(refreshToken).digest("hex");
Â  
Â  // Return the RAW token to be set as an HttpOnly cookie
Â  return refreshToken; 
};

userSchema.methods.verifyRefreshToken = function (token) {
Â  // Hash the incoming token and compare it to the stored hash
Â  const hashed = crypto.createHash("sha256").update(token).digest("hex");
Â  return this.refreshToken === hashed;
};

// ------------------- Methods: OTP -------------------
userSchema.methods.generateOtp = function () {
Â  const otp = Math.floor(100000 + Math.random() * 900000).toString();
Â  this.verificationCode = crypto.createHash("sha256").update(otp).digest("hex");
Â  this.verificationCodeExpiry = Date.now() + 10 * 60 * 1000; // 10 minutes from now
Â  return otp;
};

userSchema.methods.verifyOtp = function (otp) {
Â  const hashedOtp = crypto.createHash("sha256").update(otp).digest("hex");
Â  // Check both hash match AND if the expiry time is in the future
Â  return this.verificationCode === hashedOtp && this.verificationCodeExpiry > Date.now();
};

// ------------------- Login Throttling & Account Lockout -------------------
userSchema.virtual("isLocked").get(function () {
Â  // Returns true if lockUntil exists and is a future time
Â  return !!(this.lockUntil && this.lockUntil > Date.now());
});

userSchema.methods.incrementLoginAttempts = async function () {
Â  const LOCK_LIMIT = 5; // Max attempts before locking
Â  const LOCK_DURATION = 10 * 60 * 1000; // 10 minutes lock

Â  // 1. If the current lock time has passed, reset attempts
Â  if (this.lockUntil && this.lockUntil < Date.now()) {
Â  Â  this.loginAttempts = 1;
Â  Â  this.lockUntil = undefined;
Â  } else {
Â  Â  // 2. Increment attempts
Â  Â  this.loginAttempts = (this.loginAttempts || 0) + 1;
    
Â  Â  // 3. If attempts exceed limit and not currently locked, set lock time
Â  Â  if (this.loginAttempts >= LOCK_LIMIT && !this.isLocked) {
Â  Â  Â  this.lockUntil = Date.now() + LOCK_DURATION;
Â  Â  }
Â  }
Â  return this.save();
};

userSchema.methods.resetLoginAttempts = async function () {
Â  this.loginAttempts = 0;
Â  this.lockUntil = undefined;
Â  return this.save();
};


export const User = mongoose.model("User", userSchema);
export default User;